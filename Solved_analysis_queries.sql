#1. Calculate the Average Delay in Departures for Delayed Flight
#Determine, for flights that actually departed later than scheduled, what the average departure delay is (in minutes).

SELECT 
	AVG(TIMESTAMPDIFF(Minute, scheduled_departure, actual_departure)) As Average_Delay_Time
FROM flights
WHERE actual_departure > scheduled_departure;

#2. List Flights Grouped by Aircraft to See Usage Frequency
#Show how frequently each aircraft is used by counting the number of flights operated by each aircraft.

SELECT 
	aircraft_code AS Aircraft_Code, 
    COUNT(flight_id) AS Flight_Count
FROM flights
GROUP BY aircraft_code
ORDER BY Flight_count DESC;

#3. Calculate Total Revenue per Flight from the Ticket_Flights Table
#Aggregate the total revenue generated by each flight by summing up the fare amounts from the ticket_flights table.

SELECT 
	flight_id, 
	SUM(amount) AS Total_Revenue
FROM ticket_flights
GROUP BY flight_id
ORDER BY Total_Revenue DESC;

#4. Analyze Boarding Numbers per Flight to Detect Patterns in Boarding Pass Allocation
#Examine boarding pass data to identify how passengers are being boarded by calculating the average boarding number per flight.

SELECT 
	flight_id AS Flight_ID,
	AVG(boarding_no) AS Average_Boarding_No
FROM boarding_passes
GROUP BY flight_id
ORDER BY Average_Boarding_No DESC;

#5. Determine Occupancy and Fare Conditions per Aircraft
#Identify seat occupancy by comparing the number of boarding passes (occupied seats) to the total seats available on an aircraft, and consider the fare conditions for those seats.

SELECT 
    s.aircraft_code AS Aircraft_Code,
    COUNT(s.seat_no) AS Total_Seats,
    COUNT(bp.seat_no) AS Occupied_Seats,
    (COUNT(bp.seat_no) * 100.0 / COUNT(s.seat_no)) AS Occupancy_Percentage,
    s.fare_conditions AS Fare_Conditions
FROM seats s
LEFT JOIN boarding_passes bp ON s.seat_no = bp.seat_no
GROUP BY s.aircraft_code, s.fare_conditions
ORDER BY s.aircraft_code, Occupancy_Percentage DESC;

#6. Top 3 Flights by Revenue
#Identify the three flights that generated the highest revenue based on ticket sales.

SELECT
	flight_id AS Flight_ID,
	SUM(amount) AS Total_Revenue
FROM ticket_flights
GROUP BY flight_id
ORDER BY Total_Revenue DESC
LIMIT 3;

#7. Average Flight Duration by Aircraft Model
#Determine the average flight duration for each aircraft model, allowing you to see how flight performance might vary between different models.

SELECT
	ac.model AS Aircraft_Model,
	AVG(TIMESTAMPDIFF(Minute, f.scheduled_departure, f.scheduled_arrival)) AS Average_Flight_Duration
FROM flights f
JOIN aircrafts ac ON f.aircraft_code = ac.aircraft_code
GROUP BY ac.model
ORDER BY Average_Flight_Duration DESC;

#8. Flight Count per Airport (Departure and Arrival)
#Count how many flights depart from and arrive at each airport to assess airport activity levels.

SELECT 
    ap.airport_code AS Airport_Code,
    ap.airport_name AS Airport_Name,
    COUNT(CASE WHEN f.departure_airport = ap.airport_code THEN 1 END) AS Departure_Flight_Count,
    COUNT(CASE WHEN f.arrival_airport = ap.airport_code THEN 1 END) AS Arrival_Flight_Count
FROM airports ap
LEFT JOIN flights f ON ap.airport_code IN (f.departure_airport, f.arrival_airport)
GROUP BY ap.airport_code, ap.airport_name
ORDER BY (Departure_Flight_Count + Arrival_Flight_Count) DESC;

#9. Daily Booking Trends
#Analyze trends in bookings over time by grouping bookings by date, counting total bookings, and summing up the revenue.

SELECT
	DATE(book_date) AS Booking_Date, 
    COUNT(*) AS Total_No_of_Bookings,
    SUM(total_amount) AS Total_Revenue
FROM bookings
GROUP BY DATE(book_date)
ORDER BY DATE(book_date) ASC;

#10. Frequent Routes Analysis
#Identify the most common routes by counting the number of flights for each departure–arrival airport pair.

SELECT 
    CONCAT(dep.airport_code, ' → ', arr.airport_code) AS Route_Code,
    CONCAT(dep.city, ' → ', arr.city) AS Route_City,
    COUNT(*) AS No_of_Flights
FROM flights f
JOIN airports dep ON f.departure_airport = dep.airport_code
JOIN airports arr ON f.arrival_airport = arr.airport_code
GROUP BY Route_Code, Route_City
ORDER BY No_of_Flights DESC;

#11. Passenger Boarding Summary per Flight
#Determine how many passengers boarded each flight by counting the boarding passes issued.

SELECT
	bp.flight_id AS Flight_ID,
	f.flight_no AS Flight_No,
    COUNT(*) AS No_of_Passangers
FROM boarding_passes bp
RIGHT JOIN flights f ON bp.flight_id = f.flight_id
GROUP BY bp.flight_id, f.flight_no
ORDER BY No_of_Passangers DESC;

#12. Average Boarding Number per Flight 
#Assess the boarding process by calculating the average boarding order number for each flight, which may indicate the boarding strategy or sequence.

SELECT 
    flight_id AS Flight_ID,
    AVG(boarding_no) AS Avg_Boarding_No
FROM boarding_passes
GROUP BY flight_id
ORDER BY avg_boarding_no DESC;

#13. Seat Occupancy Rate per Flight
#Measure the seat occupancy rate for each flight by comparing the number of boarding passes issued with the total seats available on the aircraft.

SELECT 
    f.flight_id AS Flight_ID,
    COALESCE(bp.passengers_boarded, 0) AS Passengers_Boarded,
    COALESCE(s.total_seats, 0) AS Total_Seats,
    ROUND(COALESCE(bp.passengers_boarded, 0) * 100.0 / COALESCE(s.total_seats, 1), 2) AS Occupancy_Rate_Percent
FROM flights f
LEFT JOIN (
    SELECT flight_id, COUNT(*) AS Passengers_Boarded
    FROM boarding_passes
    GROUP BY flight_id
) bp ON f.flight_id = bp.flight_id
LEFT JOIN (
    SELECT aircraft_code, COUNT(*) AS Total_Seats
    FROM seats
    GROUP BY aircraft_code
) s ON f.aircraft_code = s.aircraft_code
ORDER BY Occupancy_Rate_Percent DESC;

#14. Total Spend per Passenger
#Aggregate the total amount spent by each passenger across all their tickets by joining the tickets and ticket_flights tables.

SELECT 
    t.passenger_id AS Passenger_ID,
    SUM(tf.amount) AS Total_Spent
FROM tickets t
JOIN ticket_flights tf ON t.ticket_no = tf.ticket_no
GROUP BY t.passenger_id
ORDER BY Total_Spent DESC;

